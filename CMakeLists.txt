#######
# 注意 #
#######

# CMakeではソースコードのディレクトリとは別にビルド専用のディレクトリが作成される
# ビルド結果は全てビルド専用のディレクトリに出力される
# これによりソースコードのファイル群とビルド結果のファイル群が完全に分離されるのでメンテナンス性が向上される

########################
# CMakeの非推奨コマンド群 #
########################

# include_directories
# add_definitions, add_compile_definitions, add_compile_options
# link_directories
# link_libraries

#################
# CMakeの参考URL #
#################

# https://kamino.hatenablog.com/entry/cmake_tutorial1
# https://qiita.com/shohirose/items/45fb49c6b429e8b204ac
# https://qiita.com/shohirose/items/5b406f060cd5557814e9

#########################
# CXXのコンパイルの忘備録 #
########################

# CMakeを記載するためにはC言語のコンパイルの手順を把握しておく必要がある

# オブジェクトファイル(XXX.o):
# コンパイラがプログラムを処理した結果生成される中間的なファイル
# オブジェクトファイル群をリンクすることで最終的に実行可能な実行ファイルが作成される

# まず「実行ファイルの作成」と「オブジェクトファイルの作成」と「静的ライブラリおよび共有ライブラリの作成」はすべてgccのコマンドは異なる
# g++では「オブジェクトリファイル（XXX.o）を作成するコマンド」と「ライブラリ（libXXX.soおよびlibXXX.a）を作成するコマンド」は異なる
# オブジェクトファイルとライブラリをリンクすることで実行ファイルが作成される

# 「プログラムファイル(XXX.cおよびXXX.cpp)」はコンパイルするとオブジェクトファイル(XXX.o)がそれぞれ独立して作成される
# そのため各プログラムファイル内で関数のIFはヘッダファイルで仮宣言して、プログラムファイルのスコープ内で独立して解決可能な状態にしておく必要がある

# 原則論としてはヘッダファイル（XXX.h）にはインタフェースのみが定義されていて、実装は別のプログラムファイル(XXX.cpp)に記載するのが望ましい
# 一般的には「呼び出されるincludeディレクトリ（XXX.h）」と「呼び出し元のプログラムファイル（XXX.cpp）」とは別のフォルダで管理されている
# そのためg++ではオブジェクトファイルの作成時にincludeディレクトリのパスを指定する必要がある
# そもそも論として「ヘッダファイルのXXX.h」はコンパイルしても、ヘッダファイルのオブジェクトファイル(XXX.o)は作成されない
# そのため.hのみからなるディレクトリ内にCMakeLists.txtは存在しない

# 一般的には「呼び出されるライブラリ(XXX.so or XXX.a)」は「呼び出し元のプログラムファイル(XXX.cpp)」とは別のフォルダで管理されている
# そのため実行ファイル作成時にはライブラリとリンクする必要があるため、ライブラリのパスを指定する必要がある

################
# ルートのCmake #
###############

# message:デバッグ用途のためコンソールに出力する
message("Start Root/CMake.")

# ${CMAKE_SOURCE_DIR}:CMakeLists.txtのルートのパスを表す
message("DEBUG: CMAKE_SOURCE_DIR is ${CMAKE_SOURCE_DIR}")

# 対応するcmakeの最小バージョンを指定する
# 指定を満たさない場合はエラーで終了する
# これはルートのCMakeListsにのみ記載する
cmake_minimum_required(VERSION 3.17)

# プロジェクト名とプログラム言語を指定
# これはルートのCMakeListsにのみ記載する
PROJECT(PracticePathTracing CXX)

# サブフォルダの登録
#add_subdirectory(tests)
#add_subdirectory(src)



